%%%
% This script counts the number of mRNA inside cells previously segmented in 3D using LimeSeg
% (ImageJ): Macado et al. BMC Bioinformatics, 2019 (Jan 3;20(1):2.doi: 10.1186/s12859-018-2471-0), 
% LimeSeg: a coarse-grained lipid membrane simulation for 3D image segmentation.

% To run this script, you need:
% - a two channel stack of fluorescent mRNA (channel1) and cell membranes
% (channel2)
% - a set of ply files generated by LimeSeg (one ply file per cell, one
% folder per cell, as many cells as you want)
% - a definition of all the variables found in the section DEFINE
% PARAMETERS (lines 50-80) 

% I. This script first opens the 2 channels stack of fluorescent mRNA (channel1) and cell membranes (channel 2). It crops this 2 channels stack
% around each segmented cell using the ply file generated by LimeSeg.

% II. It then uses a modified version of the script of Raj et al., Nature Methods, 2008 (5(10): 877â€“879. doi:10.1038/nmeth.1253. arjunraj@cims.nyu.edu) 
% to count the total number of mRNA in the cropped image. In brief: 
% 1) Run the raw image data through a linear filter designed to enhance particulate signals.
% 2) Count the number of spots in the image for all possible thresholds.
% 3) Manually identify the threshold by looking for a "plateau" region in graph of number of mRNAs as a function of the threshold.

%% Modified here to allow the user to either define a manual threshold as designed by Raj et al or a fixed threshold. This last option automatically happens
%% when the variable "fixed_threshold" is defined by the user (line 80). 
%% Modified to use imgaussfilter3 as a 3D Gaussian filter rather than the LOG_filter function defined by Raj et al. 2008. The user can choose a cubic or non-cubic Gaussian filter (see lines 170-171)
%% Changed function multithreshstack.m because image normalization was done twice

% III. This script then calculates the number of those mRNA which are included
% inside the segmented cell volume using matlab function AlphaShape.

% IV. This script outputs a xls file containing the following variables (in columns) for
% each set of cells: 
% - Cellid: cell id as given in the folder names generated by LimeSeg
% - CellSurfaceArea: cell surface area  in square pixels
% - CellVolume: cell volume in cubic pixels 
% - CellSurfaceArea_mu: cell surface area in microns
% - CellVolume_mu: cell volume in microns
% - number_of_mrna: number of mRNA detected in the cropped image around the cell
% - Number_mRNA_inside 
% This script outputs a 3D plot of the group of cells with a heatmap
% proportional to the number of mRNA found in the individual cells
% (red = high number of mRNA; blue = low number of mRNA)
% This script outputs a xls file containing informations on mRNA particles
% found inside each cell (centroidx, centroidy, centroidz, equivalent diamater, maxintensity)

%% Written by Severine Urdy (severine.urdy@gmail.com)
%%

clearvars
close all
tic

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DEFINE PARAMETERS

%% Path to data to analyse
MyPath = 'C://Count_mRNA_Urdy/'; % path to data
% MyPath = '/media/surdy/Desk_8TB/PROJECTS/ENS/Count_mRNA_Urdy/';% path to data
% MyPath = '/home/sev/Documents/Count_mRNA_Urdy/';% path to data

Source_path = fullfile(MyPath, 'Source_code/'); % path to matlab source code

%% Stage to analyse (written as in the folder names)
Stage = 'LL3';

%% Transcription factor to analyse (written as in the folder names)
TF = 'Jim';

%% VNC (written as in the folder names)
VNC = 'VNC01';

%% Hemisegment  (written as in the folder names)
HS = 'T2R';

%% Scaling and image data set
scaleX = 0.0508201; % in microns as given by ImageJ
scaleZ = 0.3458000; % in microns as given by ImageJ
% ncells = 1; % number of cells you want to analyse if you don't want to analyse all of them: if so, uncomment this line 

%% Define Gauss parameters to filter images and find particles
param1 = 5; % Size of the Gaussian filter [param1 param1 3] in pixels (to use a cubic filter, comment line 170 and uncomment line 171). This parameter must be an odd integer
param2 = 0.25; % standard deviation (variance) of the Gaussian filter [param2 param2 0.5] (to use a cubic Gaussian kernel, comment line 170 and uncomment line 171)
fixed_threshold = 11; % if commented out, you get the possibility to manually pick a threshold per cell

%% Critical radius (to approximate the cell shape from the LimeSeg output ply file)
criticalradius = 100;

%% Margin to crop around ply file
margin = 1;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extra parameters (they normally don't need to be changed unless you change your folder naming convention)
Experiment_path = strcat(MyPath,Stage,'_',TF,'/');
Image_path = strcat(Experiment_path,VNC,'/');
Cell_path = strcat(HS,'/LimeSeg/');

prefix1 = strcat(Stage,'_',TF,'_',VNC,'_',HS,'_cell_');
Ratio = scaleZ/scaleX;
listing = dir(fullfile(Image_path,Cell_path));
a = exist('ncells','var');
if isequal(a,1) % number of cells has been defined by the user
else
    % analyse all available cells
    ncells = size(listing,1)-2;
end

%% Imsane (extra scripts to be able to import export images)
p = genpath(fullfile(Source_path,'/imsaneV1.2/'));
addpath(p);

%% Import image data for a VCN
cd(Image_path)
V =  bfOpen3DVolume(strcat(Stage,'_',TF,'_',VNC,'.tif'));  % opens the image dataset, i.e. LL3_Jim_VNC01.tif
nslices = size(V{1,1}{1,1},3)/2;

%% LOOP ON SEGMENTED CELLS (OF A VCN OF A SEGMENT = Lin A)
%% Declaration of output variables
CellSurfaceArea = zeros(ncells,1);
CellVolume = zeros(ncells,1);
CellSurfaceArea_mu = zeros(ncells,1);
CellVolume_mu = zeros(ncells,1);
CellCentroid = zeros(ncells,3);
number_of_mrna = zeros(ncells,1);
Number_mRNA_inside = zeros(ncells,1);

for cell = 1:ncells

    
    Seg_path = fullfile(Image_path,Cell_path,strcat(prefix1,num2str(cell,'%01i'))); %% Cell level
    
    %% Make results directory
    cd(Seg_path)
    b = exist('fixed_threshold','var');
    if isequal(b,1) % a fixed threshold has been defined
        Results_folder = strcat(prefix1,num2str(cell),'_Results_Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(fixed_threshold));
    else
        Results_folder = strcat(prefix1,num2str(cell),'_Results_Gauss_',num2str(param1),'_',num2str(param2), '_manual_thresh_');
    end
    [status] = mkdir(Results_folder);
    if status == 1
    else 
        mkdir Results_folder
    end
    
    %% Check the segmented cell
    cd(Seg_path)
    ptCloud{cell} = pcread('T_1.ply');
    cd(Source_path)

%     figure (), pcshow(ptCloud{cell});
    X{cell} = double(ptCloud{cell}.Location(:,1)); 
    Y{cell} = double(ptCloud{cell}.Location(:,2)); 
    Z{cell} = double(ptCloud{cell}.Location(:,3))/Ratio; % somehow, it seems that the segmentation was done on a two channel image and the z is incremented
%     criticalradius = criticalAlpha(shp{cell},'one-region') ;    
    shp{cell} = alphaShape(X{cell},Y{cell},Z{cell},criticalradius);
%     figure (), plot(shp{cell})
%     hold on, plot3(X{cell},Y{cell},Z{cell}*Ratio,'o')
%     hold off

    sizeX{cell} = round(max(X{cell})-min(X{cell})); % Size of segmented cell in X direction
    sizeY{cell} = round(max(Y{cell})-min(Y{cell})); % Size of segmented cell in Y direction
    sizeZ{cell} = round(max(Z{cell})-min(Z{cell})); % Size of segmented cell in Z direction
    
    crop_matrix3{cell} = [round(min(X{cell})) round(min(Y{cell})) round(min(Z{cell}))-margin sizeX{cell} sizeY{cell}  sizeZ{cell}+margin]; % 3D matrix to crop around a cell in X and Y plane
    
   
    
    %% Crop around the segmented cell: 3D
    %% Dot stack: channel 1
    Stack_dots = imcrop3(double(V{1,1}{1,1}(:,:,1:2:2*nslices)),crop_matrix3{cell}); % somehow, it seems that the segmentation was done on a two channel image and the z is incremented
    
    %% Cell stack: channel 2
    Stack_cells = imcrop3(double(V{1,1}{1,1}(:,:,2:2:2*nslices)),crop_matrix3{cell}); % somehow, it seems that the segmentation was done on a two channel image and the z is incremented
    
    bfsave(Stack_cells,fullfile(Seg_path,Results_folder,'Cell.tif'),'BigTiff',true,'dimensionOrder', 'XYZCT');
    bfsave(Stack_dots,fullfile(Seg_path,Results_folder,'Dots.tif'),'BigTiff',true,'dimensionOrder', 'XYZCT');
    
   
    %%%% Modified from Raj et al 2008 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %% Now run the data through a linear filter to enhance particles
    ims2 = LOG_filter(Stack_dots,param1,param2); % original raj et al

%     ims2 = imgaussfilt3(Stack_dots,[param2 param2 0.5],'FilterSize',[param1 param1 3]); % replaced by an updated 3D gaussian filter
%     ims2 = imgaussfilt3(Stack_dots,[param2 param2 param2],'FilterSize',[param1 param1 param1]); % Cubic gaussian filter

    %% Normalize ims2
    ims3 = ims2/max(ims2(:)); 
    
    %% This function call will find the number of mRNAs for all thresholds   
    [thresholdfn] = multithreshstack(ims3); % corrected from raj et al (normalization was done twice)


    %% These are the thresholds
    thresholds = (1:100)/100;

    %% Let's plot the threshold as a function of the number of mRNAs
    h0 = figure('windowState','maximized','visible','off');
    plot(thresholds, thresholdfn);
    xlabel('Threshold');
    ylabel('Number of spots counted');
    % % Zoom in on important area
    % ylim([0 2000]);
    
    %% Choice between manual threshold or fixed threshold
    A = exist('fixed_threshold','var');
    if isequal(A,1)
        x = fixed_threshold;
    else
        title('Click at appropriate x/threshold value and hit return')

        [x,y] = getpts;
        line([x x],[0 4000]);
        x = round(x*100);  % 100 is the number of thresholds
    end
    
    %% Number of mRNA found using the chosen threshold
    number_of_mrna(cell) = thresholdfn(x);

    saveas(h0, fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'_threshold.tif')));
    close (h0)
    
    %%%% Modified from Raj et al 2008 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    %% Find particles for the chosen threshold
    bwl = ims3 > x/100;
    
    [lab,n] = bwlabeln(bwl); % 3D segmentation of particles    

    
    %% Get stats on particles size, shape, position... in pixels and global coordinates
    Stats{cell} = regionprops3(lab,Stack_dots,'Centroid','EquivDiameter','PrincipalAxisLength','MaxIntensity');
    if isequal(isempty(Stats{cell}),1) % empty: no ARN found at all in the cropped image
        centroids = cat(1, Stats{cell}.Centroid); % in pixels (in the cropped image, not in the global image coordinates)
        axeslength = cat(1,Stats{cell}.PrincipalAxisLength); % in pixels (in the cropped image, not in the global image coordinates)
        maxintensity = cat(1,Stats{cell}.MaxIntensity);
        Stats{cell}.centered_centroids(:,1) = NaN; % replaced in the original image coordinates
        Stats{cell}.centered_centroids(:,2) = NaN; % replaced in the original image coordinates
        Stats{cell}.centered_centroids(:,3) = NaN; % we want coordinates not slices so we need to rescale according to the ratio of scale in XY and Z directions
        
    else
        centroids = cat(1, Stats{cell}.Centroid); % in pixels (in the cropped image, not in the global image coordinates)
        axeslength = cat(1,Stats{cell}.PrincipalAxisLength); % in pixels (in the cropped image, not in the global image coordinates)
        maxintensity = cat(1,Stats{cell}.MaxIntensity);
        Stats{cell}.centered_centroids(:,1) = crop_matrix3{cell}(1) + centroids(:,1); % replaced in the original image coordinates
        Stats{cell}.centered_centroids(:,2) = crop_matrix3{cell}(2) + centroids(:,2) ; % replaced in the original image coordinates
        Stats{cell}.centered_centroids(:,3) = (crop_matrix3{cell}(3) + centroids(:,3))*Ratio; % we want coordinates not slices so we need to rescale according to the ratio of scale in XY and Z directions
    end
  
    %% Query how many particles are inside segmented cell 
    %% Recalculate alphashape (original given by Limeseg)
    Xo{cell} = double(ptCloud{cell}.Location(:,1)); 
    Yo{cell} = double(ptCloud{cell}.Location(:,2)); 
    Zo{cell} = double(ptCloud{cell}.Location(:,3)); % original given by Limeseg in global coordinates
    shp_original{cell} = alphaShape(Xo{cell},Yo{cell},Zo{cell},criticalradius);
    tf = inShape(shp_original{cell},Stats{cell}.centered_centroids(:,1),Stats{cell}.centered_centroids(:,2),Stats{cell}.centered_centroids(:,3));  % 0 = no, 1 = yes (inside)
    kk0 = find(tf==0);
    kk1 = find(tf==1);
    if isempty(kk1) %% no particles found inside the cell
        Number_mRNA_inside(cell,1) = 0;
    else
        Number_mRNA_inside(cell,1) = length(kk1);
    end
    
    %% Output variables associated to particles inside cells
    CentroidX = Stats{cell}.centered_centroids(kk1,1); %% in pixels  
    CentroidY = Stats{cell}.centered_centroids(kk1,2); %% in pixels  
    CentroidZ = Stats{cell}.centered_centroids(kk1,3); %% in pixels  
    if isequal(isempty(Stats{cell}),1) % empty: no ARN found at all in the cropped image
        EquivDiameter = []; %% In micrometers
        MaxIntensity = [];
        Stats_Inside{cell} = table(CentroidX,CentroidY,CentroidZ,EquivDiameter,MaxIntensity);
    else
        EquivDiameter = Stats{cell}.EquivDiameter(kk1,1)*scaleX; %% In micrometers
        MaxIntensity = Stats{cell}.MaxIntensity(kk1,1);
        Stats_Inside{cell} = table(CentroidX,CentroidY,CentroidZ,EquivDiameter,MaxIntensity);
    end
    
    %% Cell morphometry
    CellSurfaceArea(cell) = surfaceArea(shp_original{cell}); % in pixels
    CellVolume(cell) = volume(shp_original{cell}); % in pixels
    CellSurfaceArea_mu(cell) = CellSurfaceArea(cell)*scaleX*scaleX; % in muÂ²
    CellVolume_mu(cell) = CellVolume(cell)*scaleX*scaleX*scaleX; % in muÂ³
    CellCentroidX(cell,1) = mean(shp_original{cell}.Points(:,1)); % Center X
    CellCentroidY(cell,1) = mean(shp_original{cell}.Points(:,2)); % Center Y
    CellCentroidZ(cell,1) = mean(shp_original{cell}.Points(:,3)); % Center Z
    
    %% Check results visually
    %% Segmentation output images to check in ImageJ 
    cd(fullfile(Seg_path,Results_folder))
    Check_folder = 'Check';
    [status] = mkdir(Check_folder);
    if status == 1
    else 
        mkdir Check_folder
    end  
    for zz = 1:size(lab,3)
        h(zz) = figure ('windowState','maximized','visible','off'); 
%         subplot(1,3,1), imshow(Stack_dots(:,:,zz),[]); 
%         subplot(1,3,2), imshow(ims3(:,:,zz),[]);  
%         subplot(1,3,3), imshow(label2rgb(lab(:,:,zz),'jet','k','shuffle'));
%         print(h(zz),fullfile(Seg_path,Results_folder,Check_folder,strcat('Labelled_z',num2str(zz,'%03d'),'.tif')),'-dtiff');
        subplot(1,3,1), imshowpair(Stack_dots(:,:,zz),Stack_cells(:,:,zz)); %% RNA in green, membrane signal in magenta
        subplot(1,3,2), imshowpair(ims3(:,:,zz),Stack_cells(:,:,zz));  %% RNA in green, membrane signal in magenta
        subplot(1,3,3), imshow(label2rgb(lab(:,:,zz),'jet','k','shuffle'));
        print(h(zz),fullfile(Seg_path,Results_folder,Check_folder,strcat('Labelled_z',num2str(zz,'%03d'),'.tif')),'-dtiff');
    end
    
%     h1 = figure ('windowState','maximized','visible','off'); subplot(1,3,1), montage( mat2gray(Stack_dots)); title ('Dots slices')
%     subplot(1,3,2), montage(lab); title (strcat('thresh =',num2str(x), '; mRNA =',num2str(number_of_mrna(cell))))
%     subplot(1,3,3), montage(mat2gray(Stack_cells)); title ('Cells slices');
%     saveas (h1, fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'.tif')));
%     close (h1)
    
    if isequal(isempty(Stats{cell}),1) % empty: no ARN found at all in the cropped image
        % do nothing
    else
        h2 = figure ('windowState','maximized','visible','off'); subplot(1,2,1), histogram(axeslength(:,1)); title ('Major axis length  (pix)')
        subplot(1,2,2), histogram(axeslength(:,2)); title ('Minor axis length (pix)')
        saveas (h2, fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'_particle_lengths.tif')));
        close (h2)
    end
    
%     h3 = figure ('windowState','maximized','visible','off'); plot(shp{cell}), alpha(0.1),
%     hold on, plot3(Stats{cell}.centered_centroids(kk0,1),Stats{cell}.centered_centroids(kk0,2),Stats{cell}.centered_centroids(kk0,3),'r*')
%     hold on, plot3(Stats{cell}.centered_centroids(kk1,1),Stats{cell}.centered_centroids(kk1,2),Stats{cell}.centered_centroids(kk1,3),'b*')
%     title (strcat('Cell and mRNA:',num2str(Number_mRNA_inside(cell)),' inside'))
%     saveas (h3, fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'_including_',num2str(Number_mRNA_inside(cell)),'_inside.tif')));
%     close(h3)
    if isequal(isempty(Stats{cell}),1) % empty: no ARN found at all in the cropped image
        % do nothing
    else
        h4 = figure ('windowState','maximized','visible','off'); histogram(maxintensity(:,1)); title ('Max intensity')
        saveas (h4, fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'_max_intensity.tif')));
        close (h4)
    end
    
    %% Save workspace variables to mat file    
%     save(fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'.mat')),'Stats');

    %% Save info on all particles found in the crop region
    writetable(Stats{cell},fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_',num2str(number_of_mrna(cell)),'.xls')));
    
    %% Save info on particles found inside a cell only
    writetable(Stats_Inside{cell},fullfile(Seg_path,Results_folder,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_mRNA_Inside_',num2str(Number_mRNA_inside(cell)),'.xls')));
    
    %% Clear
    clear Stack_dots
    clear Stack_cells
      

end %% END Cell loop

%% OUTPUT

%% Figure of LinA and number of mRNA inside
h5 = figure ('windowState','maximized','visible','on');
cmap = colormap(jet);
for cell = 1: ncells  
   
    Cellid{cell,1} = strcat('Cell_',num2str(cell,'%01i'));
    if isequal(Number_mRNA_inside(cell,1),0)
        c(cell,1) = cmap(1,1);
        c(cell,2) = cmap(1,2);
        c(cell,3) = cmap(1,3);
    else
        c(cell,1) = cmap(round(Number_mRNA_inside(cell)/max(Number_mRNA_inside)*256),1);
        c(cell,2) = cmap(round(Number_mRNA_inside(cell)/max(Number_mRNA_inside)*256),2);
        c(cell,3) = cmap(round(Number_mRNA_inside(cell)/max(Number_mRNA_inside)*256),3);
    end
%     shp{cell} = alphaShape(X{cell},Y{cell},Z{cell}*Ratio,100); %% Smooth cells for nicer output figure
%     shp{cell} = alphaShape(X{cell},Y{cell},Z{cell}*Ratio,criticalradius); %% Smooth cells for nicer output figure
    plot(shp_original{cell},'FaceColor',c(cell,:),'FaceAlpha',0.5,'LineStyle','none'); hold on  
    for i = 1: size(Stats_Inside{cell},1) %% Loop over particles in a cell
        plot3(Stats_Inside{cell}.CentroidX(i),Stats_Inside{cell}.CentroidY(i),Stats_Inside{cell}.CentroidZ(i),'o','Color','k','MarkerSize',round(Stats_Inside{cell}.EquivDiameter(i)*10),'MarkerFaceColor','k'); hold on
    end
%     for j = 1: size(Stats{cell},1) %% Loop over all found particles in the cropped stack
%         plot3(Stats{cell}.centered_centroids(j,1),Stats{cell}.centered_centroids(j,2),Stats{cell}.centered_centroids(j,3),'o','Color','r','MarkerSize',round(Stats{cell}.EquivDiameter(j)*scaleX*10),'MarkerFaceColor','r'); hold on
%     end
end
% hold on, xlabel('X'), ylabel('Y'),zlabel('Z');
title('red: high # mRNA ; blue: low # mRNA')
l = light('Position',[-0.4 0.2 0.9],'Style','infinite');
lighting gouraud
material shiny
view (90,0)
axis off
colorbar('Ticks',[0,1],'TickLabels',{'0',num2str(max(Number_mRNA_inside))});
saveas(h5,fullfile(Image_path,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_viewYZ.tif')));
saveas(h5,fullfile(Image_path,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_viewYZ.fig')));
% view (0,90)
% axis off
% saveas(h5,fullfile(Image_path,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_viewXY.tif')));
% view(0,0)
% axis off
% saveas(h5,fullfile(Image_path,strcat(prefix1,'Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'_viewXZ.tif')));

%% Export xls data for a VNC
filename = fullfile(Image_path,strcat(prefix1,num2str(ncells),'_Gauss_',num2str(param1),'_',num2str(param2), '_thresh_',num2str(x),'.xls'));
T = table(Cellid,CellCentroidX,CellCentroidY,CellCentroidZ,CellSurfaceArea, CellVolume, CellSurfaceArea_mu, CellVolume_mu, number_of_mrna, Number_mRNA_inside);
writetable(T,filename);
toc
cd(Source_path)
